@book{Fowler1999,
	added-at = {2007-09-26T23:42:13.000+0200},
	address = {Boston, MA, USA},
	author = {Fowler, Martin},
	biburl = {http://www.bibsonomy.org/bibtex/27151885e8b8528651e048242f3527132/kimmens},
	description = {AOEvolutionchapter short paper},
	interhash = {955b704413985c65e6a0ba497d70b00e},
	intrahash = {7151885e8b8528651e048242f3527132},
	isbn = {0-201-48567-2},
	keywords = {evolution refactoring software},
	publisher = {Addison-Wesley},
	timestamp = {2007-09-26T23:42:13.000+0200},
	title = {Refactoring: Improving the Design of Existing Code},
	year = 1999
}



@phdthesis{Opdyke:1992:ROF:169783,
	author = {Opdyke, William F.},
	title = {Refactoring Object-oriented Frameworks},
	year = {1992},
	note = {UMI Order No. GAX93-05645},
	publisher = {University of Illinois at Urbana-Champaign},
	address = {Champaign, IL, USA},
} 


@book{Beck:2000:PEP:557458,
	author = {Beck, Kent and Fowler, Martin},
	title = {Planning Extreme Programming},
	year = {2000},
	isbn = {0201710919},
	edition = {1st},
	publisher = {Addison-Wesley Longman Publishing Co., Inc.},
	address = {Boston, MA, USA},
} 

@inproceedings{Murphy-Hill:2009:WRW:1555001.1555044,
	author = {Murphy-Hill, Emerson and Parnin, Chris and Black, Andrew P.},
	title = {How We Refactor, and How We Know It},
	booktitle = {Proceedings of the 31st International Conference on Software Engineering},
	series = {ICSE '09},
	year = {2009},
	isbn = {978-1-4244-3453-4},
	pages = {287--297},
	numpages = {11},
	url = {http://dx.doi.org/10.1109/ICSE.2009.5070529},
	doi = {10.1109/ICSE.2009.5070529},
	acmid = {1555044},
	publisher = {IEEE Computer Society},
	address = {Washington, DC, USA},
} 

@inproceedings{Kim:2011:EIR:1985793.1985815,
	author = {Kim, Miryung and Cai, Dongxiang and Kim, Sunghun},
	title = {An Empirical Investigation into the Role of API-level Refactorings During Software Evolution},
	booktitle = {Proceedings of the 33rd International Conference on Software Engineering},
	series = {ICSE '11},
	year = {2011},
	isbn = {978-1-4503-0445-0},
	location = {Waikiki, Honolulu, HI, USA},
	pages = {151--160},
	numpages = {10},
	url = {http://doi.acm.org/10.1145/1985793.1985815},
	doi = {10.1145/1985793.1985815},
	acmid = {1985815},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {defects, empirical study, refactoring, release cycle, software evolution},
}


@inproceedings{Kim:2012:EII:2473496.2473590,
	author = {Kim, Miryung and Rachatasumrit, Napol},
	title = {An Empirical Investigation into the Impact of Refactoring on Regression Testing},
	booktitle = {Proceedings of the 2012 IEEE International Conference on Software Maintenance (ICSM)},
	series = {ICSM '12},
	year = {2012},
	isbn = {978-1-4673-2313-0},
	pages = {357--366},
	numpages = {10},
	url = {http://dx.doi.org/10.1109/ICSM.2012.6405293},
	doi = {10.1109/ICSM.2012.6405293},
	acmid = {2473590},
	publisher = {IEEE Computer Society},
	address = {Washington, DC, USA},
	keywords = {Testing,Engines,Conferences,Software maintenance,History,Measurement,regression testing,software evolution,refactoring,empirical study},
} 

@inproceedings{Kim:2012:FSR:2393596.2393655,
	author = {Kim, Miryung and Zimmermann, Thomas and Nagappan, Nachiappan},
	title = {A Field Study of Refactoring Challenges and Benefits},
	booktitle = {Proceedings of the ACM SIGSOFT 20th International Symposium on the Foundations of Software Engineering},
	series = {FSE '12},
	year = {2012},
	isbn = {978-1-4503-1614-9},
	location = {Cary, North Carolina},
	pages = {50:1--50:11},
	articleno = {50},
	numpages = {11},
	url = {http://doi.acm.org/10.1145/2393596.2393655},
	doi = {10.1145/2393596.2393655},
	acmid = {2393655},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {churn, component dependencies, defects, empirical study, refactoring, software evolution},
}


@article{Tsantalis2013,
	abstract = {In this paper we present an empirical study on the refactoring activity in three well-known projects. We have studied five research questions that explore the different types of refactorings applied to different types of sources, the individual contribution of team members on refactoring activities, the alignment of refactoring activity with release dates and testing periods, and the motivation behind the applied refactorings. The studied projects have a history of 12, 7, and 6 years, respectively. We have found that there is very little variation in the types of refactorings applied on test code, since the majority of the refactorings focus on the reorganization and renaming of classes. Additionally, we have identified that the refactoring decision making and application is often performed by individual refactoring "managers". We have found a strong alignment between refactoring activity and release dates. Moreover, we found that the development teams apply a considerable amount of refactorings during testing periods. Finally, we have also found that in addition to code smell resolution the main drivers for applying refactorings are the introduction of extension points, and the resolution of backward compatibility issues. },
	author = {Tsantalis, Nikolaos and Guana, Victor and Stroulia, Eleni and Hindle, Abram},
	file = {:home/vagner/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Tsantalis et al. - 2013 - A Multidimensional Empirical Study on Refactoring Activity.pdf:pdf},
	journal = {Proceedings of the 2013 Conference of the Center for Advanced Studies on Collaborative Research},
	mendeley-groups = {Arquitetura de Software/Projeto},
	pages = {132--146},
	title = {{A Multidimensional Empirical Study on Refactoring Activity}},
	url = {http://dl.acm.org/citation.cfm?id=2555523.2555539},
	year = {2013}
}


@article{Danilo,
	author = {Silva,Danilo and Valente, Marco Tulio and Figueiredo, Eduardo},
	title = {Um Estudo sobre Extração de Métodos para Reutilização de Código},
	journaltitle = {XII Workshop em Engenharia de Software Experimental (ESELAW)},
	year = {2015},
}


@article{Perry:1992:FSS:141874.141884,
	author = {Perry, Dewayne E. and Wolf, Alexander L.},
	title = {Foundations for the Study of Software Architecture},
	journal = {SIGSOFT Softw. Eng. Notes},
	issue_date = {Oct. 1992},
	volume = {17},
	number = {4},
	month = oct,
	year = {1992},
	issn = {0163-5948},
	pages = {40--52},
	numpages = {13},
	url = {http://doi.acm.org/10.1145/141874.141884},
	doi = {10.1145/141874.141884},
	acmid = {141884},
	publisher = {ACM},
	address = {New York, NY, USA},
}

@ARTICLE{5204070,
	author={L. Passos and R. Terra and M. T. Valente and R. Diniz and N. das Chagas Mendonca},
	journal={IEEE Software},
	title={Static Architecture-Conformance Checking: An Illustrative Overview},
	year={2010},
	volume={27},
	number={5},
	pages={82-89},
	abstract={In this article, the authors compare and illustrate the use of three static architecture-conformance techniques: dependency-structure matrices, source code query languages, and reflexion models. To highlight the similarities and differences between these three techniques, they describe how to apply some of the techniques' available supporting tools to specify and check architectural constraints for a simple personal information management system.},
	keywords={conformance testing;query languages;software architecture;software metrics;source coding;architectural constraint checking;conformance checking;dependency-structure matrices;personal information management system;reflexion models;source code query languages;static architecture;Computer architecture;Computer bugs;Database languages;Information management;Java;Packaging;Programming;Software architecture;Software packages;Software systems;architectural erosion;architecture conformance;dependency-structure matrices;software reflexion models;source code query languages},
	doi={10.1109/MS.2009.117},
	ISSN={0740-7459},
	month={Sept},
}
@article{Bird2009,
	abstract = {We are now witnessing the rapid growth of decentralized source code management (DSCM) systems, in which every developer has her own repository. DSCMs facilitate a style of collaboration in which work output can flow sideways (and privately) between collaborators, rather than always up and down (and publicly) via a central repository. Decentralization comes with both the promise of new data and the peril of its misinterpretation. We focus on git, a very popular DSCM used in high-profile projects. Decentralization, and other features of git, such as automatically recorded contributor attribution, lead to richer content histories, giving rise to new questions such as ldquoHow do contributions flow between developers to the official project repository?rdquo However, there are pitfalls. Commits may be reordered, deleted, or edited as they move between repositories. The semantics of terms common to SCMs and DSCMs sometimes differ markedly, potentially creating confusion. For example, a commit is immediately visible to all developers in centralized SCMs, but not in DSCMs. Our goal is to help researchers interested in DSCMs avoid these and other perils when mining and analyzing git data.},
	author = {Bird, Christian and Rigby, Peter C. and Barr, Earl T. and Hamilton, David J. and German, Daniel M. and Devanbu, Prem},
	doi = {10.1109/MSR.2009.5069475},
	file = {:home/vagner/workspace/proj-arch-software/doc/refer{\^{e}}ncias/kalliamvakou-MSR2014.pdf:pdf},
	isbn = {9781424434930},
	issn = {15737616},
	journal = {Proceedings of the 2009 6th IEEE International Working Conference on Mining Software Repositories, MSR 2009},
	keywords = {code reviews,git,github,mining software repositories},
	mendeley-groups = {Arquitetura de Software/Projeto},
	pages = {1--10},
	title = {{The promises and perils of mining git}},
	year = {2009}
}
@inproceedings{Xing:2005:UAO:1101908.1101919,
	author = {Xing, Zhenchang and Stroulia, Eleni},
	title = {UMLDiff: An Algorithm for Object-oriented Design Differencing},
	booktitle = {Proceedings of the 20th IEEE/ACM International Conference on Automated Software Engineering},
	series = {ASE '05},
	year = {2005},
	isbn = {1-58113-993-4},
	location = {Long Beach, CA, USA},
	pages = {54--65},
	numpages = {12},
	url = {http://doi.acm.org/10.1145/1101908.1101919},
	doi = {10.1145/1101908.1101919},
	acmid = {1101919},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {design differencing, design mentoring, design understanding, structural evolution},
}

@inproceedings{Biegel:2011:CSM:1985441.1985452,
	author = {Biegel, Benjamin and Soetens, Quinten David and Hornig, Willi and Diehl, Stephan and Demeyer, Serge},
	title = {Comparison of Similarity Metrics for Refactoring Detection},
	booktitle = {Proceedings of the 8th Working Conference on Mining Software Repositories},
	series = {MSR '11},
	year = {2011},
	isbn = {978-1-4503-0574-7},
	location = {Waikiki, Honolulu, HI, USA},
	pages = {53--62},
	numpages = {10},
	url = {http://doi.acm.org/10.1145/1985441.1985452},
	doi = {10.1145/1985441.1985452},
	acmid = {1985452},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {code clones, mining software repositories, refactoring, replication experiment, similarity metrics, software evolution},
} 